/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

import controller.DriverDAO;
import controller.ContractDAO;
import model.Contract;
import model.Driver;
import model.Entry;
import java.time.LocalDate;


/**
 *
 * @author Delar
 */
public class SelectDriverFrm extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form SelectDriverFrm
     */
    private Entry entry;
    ArrayList<Driver> listDriver;
    SelectDriverFrm mainFrm = this;
    
    public SelectDriverFrm(Entry entry) {
        initComponents();
        this.entry = entry;


        DriverDAO driverDAO = new DriverDAO();
        listDriver = driverDAO.searchDriver(entry.getContract().getRaceTeam().getId());
        
        Object[][] data = new Object[listDriver.size()][4];
        Object[] columNames = {"STT", "Tay đua", "quốc tịch", "Chọn"};

        for(int i = 0; i < listDriver.size(); i++){
            data[i][0] = i + 1;
            data[i][1] = listDriver.get(i).getName();
            data[i][2] = listDriver.get(i).getNationality();
            data[i][3] = Boolean.FALSE;
        }

        DefaultTableModel dtm = new DefaultTableModel(data, columNames){
        
            @Override
            public boolean isCellEditable(int row, int column) {
               return column == 3 ? true : false;
            }
        };                
        tblDriver.setModel(dtm); 
        tblDriver.getColumnModel().getColumn(3).setCellRenderer(new BooleanRenderer());
        tblDriver.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(new JCheckBox()));
        
        
        btnEntry.addActionListener(this);
    }
    
    public class BooleanRenderer extends JCheckBox implements TableCellRenderer {
    
        public BooleanRenderer() {
        super();
        setHorizontalAlignment(JCheckBox.CENTER);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
                                                   boolean isSelected, boolean hasFocus,
                                                   int row, int column) {
        if (value instanceof Boolean) {
            setSelected((boolean) value);
        }
        return this;
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDriver = new javax.swing.JTable();
        btnEntry = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Select Driver");

        tblDriver.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Tay Đua", "Quốc tịch", "Chọn"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDriver.setShowGrid(true);
        jScrollPane2.setViewportView(tblDriver);
        if (tblDriver.getColumnModel().getColumnCount() > 0) {
            tblDriver.getColumnModel().getColumn(0).setMinWidth(50);
            tblDriver.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblDriver.getColumnModel().getColumn(0).setMaxWidth(50);
            tblDriver.getColumnModel().getColumn(3).setResizable(false);
        }

        btnEntry.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEntry.setText("Entry");
        btnEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEntryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnEntry)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(186, 186, 186)
                            .addComponent(jLabel1))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(44, 44, 44)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnEntry)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEntryActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEntry;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblDriver;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        
        
        int cnt = 0;
        int indexs[] = new int[2];
        ArrayList<Entry> entrys = new ArrayList<>();
        
        for(int i = 0; i < listDriver.size(); i++){
            if(cnt < 2 && (boolean)tblDriver.getModel().getValueAt(i, 3)){
                indexs[cnt++] = i;
            } else if(cnt == 2 && (boolean)tblDriver.getModel().getValueAt(i, 3)){
                JOptionPane.showMessageDialog(this, "Chỉ được phép chọn đúng 2 tay đua");
                return;
            }
        }
        if(cnt != 2){
            JOptionPane.showMessageDialog(this, "Chưa chọn đủ số lượng tay đua");
            return;
        }
        
        ContractDAO contractDAO = new ContractDAO();
        String status = contractDAO.checkContrac(listDriver.get(indexs[0]).getId(), listDriver.get(indexs[1]).getId(), entry.getContract().getRaceTeam().getId());
        
        if(status.equals("success")){
            entry.getContract().setDriver(listDriver.get(indexs[0]));
            entry.setEntryDate(LocalDate.now());

            entrys.add(entry);

            Contract contract = new Contract();
            contract.setRaceTeam(entry.getContract().getRaceTeam());
            contract.setDriver(listDriver.get(indexs[1]));

            entrys.add(new Entry(0, LocalDate.now(), "", entry.getUser(), entry.getGrandPrix(), contract));

            (new ConfirmFrm(entrys)).setVisible(true);
            mainFrm.dispose();
        }
        else {
            JOptionPane.showMessageDialog(this, status);
        }
        
    }
}
